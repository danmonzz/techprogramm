#include <iostream>
#include <string>

using namespace std;

class Node {
public:
    int cost; 
    double quantity; 
    string title;
    Node* next;

    Node(int i, double d, string s) {
        cost = i; 
        quantity = d; 
        title = s; 
        next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }

    void print() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << "Cost: " << temp->cost << ", Quantity: " << temp->quantity 
                 << ", Title: " << temp->title << endl; 
            temp = temp->next;
        }
        cout << endl;
    }

    void addToEnd(int i, double d, string s) {
        Node* newNode = new Node(i, d, s);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void addToBeginning(int i, double d, string s) {
        Node* newNode = new Node(i, d, s);
        newNode->next = head;
        head = newNode;
    }

    void addAfterIndex(int index, int i, double d, string s) {
        Node* temp = head;
        int count = 0;

        while (temp != nullptr && count < index) {
            temp = temp->next;
            count++;
        }

        if (temp != nullptr) {
            Node* newNode = new Node(i, d, s);
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            cout << "Index out of bounds." << endl;
        }
    }

    void addBefore(string ind, int i, double d, string s) {
        if (head == nullptr) return;

        if (head->title == ind) { 
            addToBeginning(i, d, s);
            return;
        }

        Node* temp = head;
        while (temp->next != nullptr && temp->next->title != ind) { 
            temp = temp->next;
        }

        if (temp->next != nullptr) {
            Node* newNode = new Node(i, d, s);
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            cout << "Person with title '" << ind << "' was not found." << endl; 
        }
    }

    void removebycost(int i) { 
        if (head == nullptr) return;

        if (head->cost == i) { 
            Node* temp = head;
            head = head->next;
            delete temp;
            return; 
        }

        Node* temp = head;
        while (temp->next != nullptr && temp->next->cost != i) { 
            temp = temp->next;
        }

        if (temp->next != nullptr) {
            Node* toDelete = temp->next;
            temp->next = temp->next->next;
            delete toDelete;
        } else {
            cout << "No person with cost " << i << " found." << endl; 
        }
    }

    ~LinkedList() {
        Node* temp;
        while (head != nullptr) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    LinkedList list;
    list.addToEnd(3, 90, "Tango");
    list.addBefore("Tango", 5, 1900, "MaskOfMadness");
    list.addToBeginning(69, 4950, "Butterfly");
    list.addAfterIndex(1, 33, 5650, "AbyssalBlade"); 

    cout << "Linked List after additions: " << endl;
    list.print();

    list.removebycost(69);
      cout << "Linked List after deleting person with cost value 69: " << endl;
    list.print();

    return 0;
}
